import matplotlib
import matplotlib.pyplot as plt
import numpy as np

matplotlib.use('Agg')


def plot_pruned_finetuned(pruned_acc_dict, finetuned_acc_dict, ratio, output):
    """Plot pruned and finetuned accuracy
    """
    fig, axis = plt.subplots(1, 2)

    for k, v in pruned_acc_dict.items():
        axis[0].plot(ratio, v, label=k)
    axis[0].set_title("pruned")
    axis[0].legend()

    for k, v in finetuned_acc_dict.items():
        axis[1].plot(ratio, v, label=k)
    axis[1].set_title("finetuned")
    axis[1].legend()

    plt.xlabel('ratio')
    plt.ylabel('accuracy')
    plt.savefig(output, dpi=1200)


def plot_comparision():
    """Plot sum vs min_min vs min_sum
    """
    full = {'sum': {'cosine_sim': [92.72, 91.48, 90.22, 90.2, 89.55, 87.42, 85.63, 84.08, 82.51, 81.55, 79.19, 78.33, 75.1, 71.26, 69.15, 66.98, 60.49, 56.38, 51.57, 47.18, 45.85, 36.47, 30.26, 28.43, 21.98, 19.78, 14.97, 13.51, 11.92, 11.01, 11.01, 10.43, 10.6, 10.26, 10.0, 10.01, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Pearson_sim': [92.64, 91.44, 90.05, 87.71, 87.43, 85.0, 82.29, 79.22, 69.58, 68.94, 65.85, 60.18, 56.06, 50.21, 42.13, 40.68, 35.89, 32.86, 30.08, 27.35, 26.65, 24.67, 22.75, 20.57, 17.61, 15.46, 16.93, 15.2, 12.8, 14.12, 11.77, 10.91, 10.41, 10.21, 10.17, 10.23, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.99, 10.0, 10.0], 'Euclide_dis': [93.26, 93.16, 92.33, 91.81, 91.18, 90.6, 89.43, 89.27, 87.35, 85.58, 84.11, 81.95, 77.83, 75.76, 71.26, 66.43, 61.31, 57.98, 57.13, 53.6, 52.15, 49.95, 48.76, 46.58, 44.84, 43.88, 40.99, 39.61, 35.95, 31.91, 31.22, 29.35, 27.01, 24.67, 22.96, 19.86, 18.02, 16.84, 16.1, 13.63, 12.1, 10.86, 10.6, 10.16, 10.02, 10.01, 10.01, 10.0, 10.0, 10.0], 'Manhattan_dis': [93.42, 93.16, 92.49, 91.49, 91.07, 89.85, 89.17, 87.47, 86.13, 84.25, 83.86, 82.55, 79.18, 77.05, 71.99, 68.08, 60.99, 60.39, 57.48, 52.68, 50.19, 48.67, 43.38, 42.21, 41.86, 39.5, 38.14, 35.26, 35.12, 32.81, 28.9, 26.7, 24.13, 21.99, 18.86, 16.86, 15.08, 13.64, 12.27, 10.82, 10.45, 10.15, 10.1, 10.01, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'min_sum': {'cosine_sim': [92.87, 92.14, 91.65, 90.51, 89.62, 88.05, 86.49, 85.21, 78.92, 75.58, 70.27, 64.42, 58.62, 59.25, 54.65, 53.42, 46.22, 48.32, 46.09, 41.07, 36.53, 32.62, 30.2, 28.68, 24.34, 23.43, 22.12, 20.58, 19.96, 16.49, 13.48, 12.49, 12.83, 16.27, 15.55, 14.95, 12.31, 13.22, 10.62, 10.48, 10.62, 10.84, 10.53, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Pearson_sim': [93.0, 92.42, 91.62, 90.92, 89.5, 89.49, 88.02, 86.15, 80.69, 78.73, 75.5, 65.5, 64.26, 58.57, 62.34, 57.23, 56.69, 50.83, 46.61, 43.96, 43.05, 38.63, 33.48, 31.11, 28.36, 20.62, 19.99, 20.6, 18.12, 18.02, 19.25, 18.71, 18.05, 12.13, 14.25, 15.09, 12.19, 15.09, 11.62, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Euclide_dis': [
        93.2, 92.4, 91.86, 91.55, 91.22, 90.35, 88.98, 86.7, 84.98, 84.11, 83.52, 82.91, 78.4, 75.55, 70.3, 67.06, 62.22, 57.92, 57.86, 53.42, 51.47, 49.94, 47.91, 44.22, 39.11, 37.18, 33.57, 30.67, 26.46, 23.25, 19.64, 18.32, 17.51, 15.21, 13.71, 11.78, 10.77, 10.29, 10.12, 10.04, 10.03, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Manhattan_dis': [93.13, 92.49, 92.0, 91.55, 90.93, 90.4, 89.38, 87.16, 85.73, 84.13, 83.06, 80.21, 77.48, 74.05, 72.73, 69.02, 64.27, 60.6, 59.32, 57.76, 54.02, 52.47, 46.83, 41.7, 36.04, 34.77, 32.81, 30.0, 29.12, 27.62, 24.11, 22.35, 19.37, 17.61, 16.88, 14.45, 13.12, 12.63, 11.24, 10.76, 10.26, 10.08, 10.04, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'min_min': {'cosine_sim': [93.02, 92.39, 91.81, 90.13, 89.68, 88.51, 87.79, 85.58, 81.62, 80.32, 79.89, 73.13, 70.5, 64.06, 55.89, 52.6, 50.78, 46.07, 40.15, 40.62, 33.27, 28.56, 29.96, 28.03, 26.1, 23.5, 22.37, 21.21, 19.4, 18.61, 18.88, 16.95, 14.71, 12.09, 12.96, 10.17, 10.17, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Pearson_sim': [93.05, 92.31, 91.49, 90.54, 89.85, 89.03, 87.86, 85.75, 82.38, 80.77, 76.9, 70.09, 68.58, 62.3, 51.48, 47.84, 42.01, 40.31, 38.06, 35.15, 33.57, 29.93, 24.83, 21.95, 23.43, 21.11, 21.21, 18.93, 17.19, 16.27, 16.17, 16.51, 14.4, 13.64, 11.04, 11.78, 11.74, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Euclide_dis': [93.13, 92.38, 92.4, 91.67, 91.13, 89.55, 88.35, 87.62, 84.91, 82.75, 82.67, 80.41, 77.71, 71.01, 69.31, 65.86, 63.84, 61.25, 55.09, 50.07, 47.96, 45.08, 42.58, 38.31, 33.32, 29.7, 26.15, 24.35, 20.77, 19.06, 16.9, 16.27, 15.11, 13.2, 13.2, 12.43, 10.88, 10.5, 10.2, 10.08, 10.01, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Manhattan_dis': [93.04, 92.61, 92.24, 91.76, 91.19, 89.17, 88.43, 87.74, 84.69, 81.5, 76.56, 74.69, 72.72, 70.12, 66.83, 63.34, 61.31, 59.25, 55.02, 51.36, 47.86, 44.85, 41.27, 38.78, 36.92, 33.14, 32.32, 30.45, 26.84, 24.0, 20.26, 18.9, 18.32, 16.86, 15.45, 13.4, 12.05, 11.48, 10.38, 10.05, 10.03, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}}
    ratio = np.around(np.arange(0.01, 0.51, 0.01), 2)

    sum_dict = full['sum']
    min_sum_dict = full['min_sum']
    min_min_dict = full['min_min']

    cosine_sim_dict = {
        'min_sum': min_sum_dict['cosine_sim'],
        'min_min': min_min_dict['cosine_sim'],
        'sum': sum_dict['cosine_sim']
    }

    Pearson_sim_dict = {
        'min_sum': min_sum_dict['Pearson_sim'],
        'min_min': min_min_dict['Pearson_sim'],
        'sum': sum_dict['Pearson_sim']
    }

    Euclide_dis_dict = {
        'min_sum': min_sum_dict['Euclide_dis'],
        'min_min': min_min_dict['Euclide_dis'],
        'sum': sum_dict['Euclide_dis']
    }

    Manhattan_dis_dict = {
        'min_sum': min_sum_dict['Manhattan_dis'],
        'min_min': min_min_dict['Manhattan_dis'],
        'sum': sum_dict['Manhattan_dis']
    }

    fig, axis = plt.subplots(2, 2)

    for k, v in cosine_sim_dict.items():
        axis[0, 0].plot(ratio, v, label=k)
    axis[0, 0].set_title("cosine_sim")
    axis[0, 0].legend()

    for k, v in Pearson_sim_dict.items():
        axis[0, 1].plot(ratio, v, label=k)
    axis[0, 1].set_title("Pearson_sim")
    axis[0, 1].legend()

    for k, v in Euclide_dis_dict.items():
        axis[1, 0].plot(ratio, v, label=k)
    axis[1, 0].set_title("Euclide_dis")
    axis[1, 0].legend()

    for k, v in Manhattan_dis_dict.items():
        axis[1, 1].plot(ratio, v, label=k)
    axis[1, 1].set_title("Manhattan_dis")
    axis[1, 1].legend()

    plt.xlabel('ratio')
    plt.ylabel('accuracy')
    plt.savefig('compare_02.png', dpi=1200)


if __name__ == "__main__":
    plt.figure(dpi=1200)

    # Plot norm num_finetune_epochs = 10
    ratio = np.around(np.arange(0.01, 0.51, 0.01), 2)
    pruned_accuracy_dict = {
        'L0': [93.47, 93.26, 92.64, 92.26, 91.56, 91.36, 90.5, 88.72, 86.44, 85.02, 81.18, 80.47, 76.93, 73.55, 70.61, 68.54, 56.38, 50.92, 43.53, 43.38, 35.25, 28.47, 25.91, 24.78, 21.11, 16.57, 15.63, 12.59, 11.78, 11.74, 10.61, 10.46, 10.12, 10.04, 10.02, 10.02, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        'L1': [93.91, 93.6, 93.07, 92.85, 92.4, 92.01, 91.3, 90.49, 88.92, 88.68, 87.92, 87.43, 87.28, 85.41, 83.92, 81.13, 80.22, 78.6, 78.98, 75.23, 72.4, 68.65, 63.11, 55.88, 47.11, 43.96, 42.05, 35.47, 31.08, 25.85, 18.7, 16.34, 14.86, 12.39, 11.9, 11.1, 10.58, 10.25, 10.37, 10.2, 10.2, 10.12, 10.06, 10.05, 10.01, 10.01, 10.0, 10.0, 10.0, 10.0],
        'L2': [93.89, 93.75, 93.25, 93.03, 92.75, 91.78, 91.09, 90.65, 89.52, 88.63, 88.3, 87.82, 85.84, 86.36, 85.15, 84.2, 82.86, 80.14, 79.65, 74.78, 71.51, 68.18, 65.31, 61.53, 58.55, 53.19, 48.91, 42.83, 36.53, 33.13, 25.15, 22.42, 18.7, 15.38, 14.61, 13.31, 12.08, 11.32, 10.48, 10.26, 10.12, 10.07, 10.05, 10.03, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        'inf': [93.81, 93.68, 93.36, 93.1, 92.63, 92.0, 91.35, 91.09, 90.19, 89.69, 89.0, 87.53, 87.37, 86.32, 85.08, 84.05, 81.7, 78.71, 78.15, 77.87, 75.97, 70.66, 69.62, 62.45, 60.2, 50.72, 46.47, 42.63, 35.97, 32.04, 27.16, 24.87, 21.79, 18.45, 15.73, 13.77, 12.33, 12.63, 11.14, 11.02, 11.84, 10.17, 10.11, 10.04, 10.0, 10.01, 10.01, 10.0, 10.0, 10.0]
    }
    finetuned_best_acc_dict = {
        'L0': [93.87, 93.82, 93.92, 93.94, 93.67, 93.53, 93.61, 93.35, 93.43, 93.58, 93.03, 93.12, 93.0, 93.11, 93.1, 92.95, 92.63, 92.77, 92.76, 92.21, 92.51, 92.09, 92.31, 92.43, 92.05, 91.82, 91.97, 91.72, 91.64, 91.12, 91.19, 90.96, 91.09, 90.85, 90.57, 90.57, 90.39, 90.28, 90.2, 90.36, 89.7, 89.54, 89.55, 89.28, 88.83, 90.55, 89.1, 89.07, 88.29, 88.46],
        'L1': [94.01, 94.01, 93.89, 93.86, 93.8, 93.7, 93.69, 93.6, 93.66, 93.52, 93.61, 93.31, 93.44, 93.34, 93.19, 93.27, 92.95, 92.75, 93.11, 92.61, 93.0, 92.62, 92.9, 92.45, 92.96, 92.08, 92.28, 92.27, 92.0, 91.93, 91.68, 91.99, 91.83, 91.33, 91.44, 91.7, 90.87, 91.22, 90.78, 90.64, 90.51, 90.76, 90.13, 90.32, 90.42, 89.93, 89.68, 89.45, 89.61, 89.77],
        'L2': [94.18, 94.07, 94.07, 93.89, 94.03, 93.85, 93.81, 93.69, 93.65, 93.59, 93.64, 93.35, 93.18, 93.31, 93.17, 93.27, 93.28, 93.01, 93.14, 93.02, 92.71, 92.84, 92.93, 92.59, 92.73, 92.41, 92.1, 91.89, 92.27, 92.08, 91.55, 91.67, 91.57, 91.61, 91.91, 91.4, 91.68, 90.91, 90.92, 91.61, 90.99, 90.98, 90.39, 90.52, 90.77, 90.11, 90.24, 89.66, 89.53, 89.59],
        'inf': [94.03, 94.11, 93.9, 93.89, 93.77, 93.62, 93.57, 93.66, 93.37, 93.34, 93.38, 93.34, 93.13, 93.29, 93.43, 93.56, 93.14, 92.9, 92.95, 92.8, 92.8, 92.57, 92.38, 92.43, 92.38, 91.87, 92.37, 92.16, 92.13, 91.37, 91.97, 91.47, 92.16, 91.19, 91.1, 91.38, 91.36, 91.21, 91.36, 90.65, 90.63, 90.79, 89.99, 90.23, 89.76, 90.23, 89.85, 89.63, 88.81, 89.22]
    }
    plot_pruned_finetuned(
        pruned_accuracy_dict, finetuned_best_acc_dict, ratio, 'figures/norm_pruned_finetuned.png')
